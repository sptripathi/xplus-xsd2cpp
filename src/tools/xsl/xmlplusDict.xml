<?xml version="1.0" encoding="UTF-8"?>

<!--
// This file is part of XmlPlus package
// 
// Copyright (C)   2010-2013   Satya Prakash Tripathi
//
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU LESSER GENERAL PUBLIC LICENSE as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU LESSER GENERAL PUBLIC LICENSE for more details.
//
// You should have received a copy of the GNU LESSER GENERAL PUBLIC LICENSE
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
-->

<xmlplusDict>

  <primitiveTypes>
    <type name="anyType">
      <impl implType="XMLSchema::Types::anyType" adt="true">
      </impl>  
    </type>
    <type name="anySimpleType">
      <impl implType="XMLSchema::Types::anySimpleType" adt="true">
      </impl>  
    </type>

    <type name="string">
      <impl implType="DOM::DOMString" adt="false">
      </impl>  
    </type>
    <type name="boolean">
      <impl implType="bool" adt="false">
      </impl>  
    </type>
    <type name="decimal">
      <impl implType="double" adt="false">
      </impl>  
    </type>
    <type name="float">
      <impl implType="float" adt="false">
      </impl>  
    </type>
    <type name="double">
      <impl implType="double" adt="false">
      </impl>  
    </type>
    <type name="time">
      <impl implType="XPlus::Time" adt="true" >
        <boundFacetSuffix>DateTime</boundFacetSuffix>
        <code>
    static DOM::DOMString typeToString(XPlus::Time val) {
      return DateTimeUtils::formatXsdTime(val); 
    }

    static XPlus::Time stringToType(DOM::DOMString strVal) {
       return DateTimeUtils::parseXsdTime(strVal);
    }
        </code>
      </impl>  
    </type>
    <type name="duration">
      <impl implType="XPlus::Duration" adt="true" >
        <boundFacetSuffix>Duration</boundFacetSuffix>
        <code>
    static DOM::DOMString typeToString(XPlus::Duration val) {
      return DateTimeUtils::formatXsdDuration(val); 
    }

    static XPlus::Duration stringToType(DOM::DOMString strVal) {
       return DateTimeUtils::parseXsdDuration(strVal);
    }
        </code>
      </impl>  
    </type>
    <type name="dateTime">
      <impl implType="XPlus::DateTime" adt="true" >
        <boundFacetSuffix>DateTime</boundFacetSuffix>
        <code>
    static DOM::DOMString typeToString(XPlus::DateTime val) {
      return DateTimeUtils::formatISO8601DateTime(val); 
    }

    static XPlus::DateTime stringToType(DOM::DOMString strVal) {
       return DateTimeUtils::parseISO8601DateTime(strVal);
    }
        </code>
      </impl>  
    </type>
    <type name="date">
      <impl implType="XPlus::Date" adt="true" >
        <boundFacetSuffix>DateTime</boundFacetSuffix>
        <code>
    static DOM::DOMString typeToString(XPlus::Date val) {
      return DateTimeUtils::formatXsdDate(val); 
    }

    static XPlus::Date stringToType(DOM::DOMString strVal) {
       return DateTimeUtils::parseXsdDate(strVal);
    }
        </code>
      </impl>  
    </type>
    <type name="gYearMonth">
      <impl implType="XPlus::YearMonth" adt="true" >
        <boundFacetSuffix>DateTime</boundFacetSuffix>
        <code>
    static DOM::DOMString typeToString(XPlus::YearMonth val) {
      return DateTimeUtils::formatXsdYearMonth(val); 
    }

    static XPlus::YearMonth stringToType(DOM::DOMString strVal) {
       return DateTimeUtils::parseXsdYearMonth(strVal);
    }
        </code>
      </impl>  
    </type>
    <type name="gMonthDay">
      <impl implType="XPlus::MonthDay" adt="true" >
        <boundFacetSuffix>DateTime</boundFacetSuffix>
        <code>
    static DOM::DOMString typeToString(XPlus::MonthDay val) {
      return DateTimeUtils::formatXsdMonthDay(val); 
    }

    static XPlus::MonthDay stringToType(DOM::DOMString strVal) {
       return DateTimeUtils::parseXsdMonthDay(strVal);
    }
        </code>
      </impl>  
    </type>
    <type name="gDay">
      <impl implType="XPlus::Day" adt="true" >
        <boundFacetSuffix>DateTime</boundFacetSuffix>
        <code>
    static DOM::DOMString typeToString(XPlus::Day val) {
      return DateTimeUtils::formatXsdDay(val); 
    }

    static XPlus::Day stringToType(DOM::DOMString strVal) {
       return DateTimeUtils::parseXsdDay(strVal);
    }
        </code>
      </impl>  
    </type>
    <type name="gMonth">
      <impl implType="XPlus::Month" adt="true" >
        <boundFacetSuffix>DateTime</boundFacetSuffix>
        <code>
    static DOM::DOMString typeToString(XPlus::Month val) {
      return DateTimeUtils::formatXsdMonth(val); 
    }

    static XPlus::Month stringToType(DOM::DOMString strVal) {
       return DateTimeUtils::parseXsdMonth(strVal);
    }
        </code>
      </impl>  
    </type>
    <type name="gYear">
      <impl implType="XPlus::Year" adt="true" >
        <boundFacetSuffix>DateTime</boundFacetSuffix>
        <code>
    static DOM::DOMString typeToString(XPlus::Year val) {
      int year = val.year();
      return XPlus::toString&lt;int&gt;(year); 
    }

    static XPlus::Year stringToType(DOM::DOMString strVal) {
       return Year(XPlus::fromString&lt;int&gt;(strVal));
    }
        </code>
      </impl>  
    </type>
    <type name="hexBinary">
      <impl implType="DOM::DOMString" adt="false">
        <code>
    virtual unsigned int lengthFacet() {
      return ceil(stringValue().length()/2);
    }
        </code>
      </impl>  
    </type>
    <type name="base64Binary" adt="false">
      <impl implType="DOM::DOMString">
        <code>
    // pseudocode from w3c XSD1.1 spec    
    //    lex2   := killwhitespace(lexform)  
    //    lex3   := strip_equals(lex2)
    //    length := floor (length(lex3) * 3 / 4)  
    virtual unsigned int lengthFacet() 
    {
      DOMString lex = stringValue();
      lex.removeChars(UTF8FNS::isWhiteSpaceChar);
      
      // length of non-whitespace chars should be multiple of 4
      assert(lex.length()%4 == 0);
      lex.trimRight(UTF8FNS::isEqualChar);

      return floor(lex.length()*3/4);
    }
        </code>
      </impl>  
    </type>
    <type name="anyURI">
      <impl implType="DOM::DOMString" adt="false">
      </impl>  
    </type>
    <type name="QName">
      <impl implType="DOM::DOMString" adt="false">
      </impl>  
    </type>
    
    <!-- used only on attributes -->
    <type name="NOTATION">
      <impl implType="DOM::DOMString" adt="false">
      </impl>  
    </type>
  </primitiveTypes>

  
  <derivedTypes>
    <type name="normalizedString" primType="string">
      <impl implType="DOM::DOMString" adt="false">
      </impl>  
    </type>
    <type name="token" primType="string">
      <impl implType="DOM::DOMString" adt="false">
      </impl>  
    </type>
    <type name="language" primType="string">
      <impl implType="DOM::DOMString" adt="false">
      </impl>  
    </type>

    <!-- used only on attributes -->
    <type name="NMTOKEN" primType="string">
      <impl implType="DOM::DOMString" adt="false">
      </impl>  
    </type>

    <!-- used only on attributes -->
    <type name="NMTOKENS" primType="string">
      <impl implType="DOM::DOMString" adt="false">
      </impl>  
    </type>
    <type name="Name" primType="string">
      <impl implType="DOM::DOMString" adt="false">
      </impl>  
    </type>
    <type name="NCName" primType="string">
      <impl implType="DOM::DOMString" adt="false">
      </impl>  
    </type>

    <!-- used only on attributes -->
    <type name="ID" primType="string">
      <impl implType="DOM::DOMString" adt="false">
      </impl>  
    </type>

    <!-- used only on attributes -->
    <type name="IDREF" primType="string">
      <impl implType="DOM::DOMString" adt="false">
      </impl>  
    </type>

    <!-- used only on attributes -->
    <type name="IDREFS" baseType="anySimpleType">
      <impl implType="DOM::DOMString" adt="false">
      </impl>  
    </type>

    <!-- used only on attributes -->
    <type name="ENTITY" primType="string">
      <impl implType="DOM::DOMString" adt="false">
      </impl>  
    </type>

    <!-- used only on attributes -->
    <type name="ENTITIES" baseType="anySimpleType">
      <impl implType="DOM::DOMString" adt="false">
      </impl>  
    </type>

    <!--
    infinite set {...,-2,-1,0,1,2,...}.
    -->
    <type name="integer" primType="decimal">
      <impl implType="XPlus::Int64" adt="false">
      </impl>  
    </type>

    <!--
    is the infinite set {1,2,...}
    -->
    <type name="positiveInteger" primType="decimal">
      <impl implType="XPlus::UInt64" adt="false">
      </impl>  
    </type>

    <!--
    infinite set {...,-2,-1,0}
    -->
    <type name="nonPositiveInteger" primType="decimal">
      <impl implType="XPlus::Int64" adt="false">
      </impl>  
    </type>

    <!--
    infinite set {...,-2,-1}
    -->
    <type name="negativeInteger" primType="decimal">
      <impl implType="XPlus::Int64" adt="false">
      </impl>  
    </type>

    <!--
    is the infinite set {0,1,2,...}. 
    -->
    <type name="nonNegativeInteger" primType="decimal">
      <impl implType="XPlus::UInt64" adt="false">
      </impl>  
    </type>

    <!--
     is ·derived· from integer by setting the value of ·maxInclusive· to be 9223372036854775807 and ·minInclusive· to be -9223372036854775808.
    -->
    <type name="long" primType="decimal">
      <impl implType="XPlus::Int64" adt="false">
      </impl>  
    </type>

    <!--
    is ·derived· from long by setting the value of ·maxInclusive· to be 2147483647 and ·minInclusive· to be -2147483648
    -->
    <type name="int" primType="decimal">
      <impl implType="int" adt="false">
      </impl>  
    </type>

    <!--
    is ·derived· from int by setting the value of ·maxInclusive· to be 32767 and ·minInclusive· to be -32768
    -->
    <type name="short" primType="decimal">
      <impl implType="short" adt="false">
      </impl>  
    </type>

    <!--
    is ·derived· from short by setting the value of ·maxInclusive· to be 127 and ·minInclusive· to be -128
    -->
    <type name="byte" primType="decimal">
      <impl implType="char" adt="false">
      </impl>  
    </type>

    <!--
    is ·derived· from nonNegativeInteger by setting the value of ·maxInclusive· to be 18446744073709551615
    -->
    <type name="unsignedLong" primType="decimal">
      <impl implType="XPlus::UInt64" adt="false">
      </impl>  
    </type>

    <!--
    is ·derived· from unsignedLong by setting the value of ·maxInclusive· to be 4294967295
    -->
    <type name="unsignedInt" primType="decimal">
      <impl implType="unsigned int" adt="false">
      </impl>  
    </type>

    <!--
    is ·derived· from unsignedInt by setting the value of ·maxInclusive· to be 65535
    -->
    <type name="unsignedShort" primType="decimal">
      <impl implType="unsigned short" adt="false">
      </impl>  
    </type>

    <!--
    is ·derived· from unsignedShort by setting the value of ·maxInclusive· to be 255
    -->
    <type name="unsignedByte" primType="decimal">
      <impl implType="unsigned char" adt="false">
      </impl>  
    </type>
  </derivedTypes>

  <ConstrainingFacets>
    <facet name="length"/>
    <facet name="minLength"/>
    <facet name="maxLength"/>
    <facet name="pattern"/>
    <facet name="enumeration"/>
    <facet name="whiteSpace"/>
    <facet name="maxInclusive"/>
    <facet name="maxExclusive"/>
    <facet name="minExclusive"/>
    <facet name="minInclusive"/>
    <facet name="totalDigits"/>
    <facet name="fractionDigits"/>
  </ConstrainingFacets>

  <CPPReservedKeywords> version auto const double float int short struct unsigned break continue else for long signed switch void case default enum goto register sizeof typedef volatile char do extern if return static union while asm dynamic_cast namespace reinterpret_cast try bool explicit new static_cast typeid catch false operator template typename class friend private this using const_cast inline public throw virtual delete mutable protected true wchar_t and bitand compl not_eq or_eq xor_eq and_eq bitor not or xor NULL </CPPReservedKeywords>

</xmlplusDict>
