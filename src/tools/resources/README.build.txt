
Steps to build the generated source:
====================================
		
  $  ./autogen.sh 	    : 	generate configure script, run configure
  $  make 	            : 	build the source
  $  make install 	    : 	install the build
  $  make doxygen-doc 	: 	generates the doxygen html documentation in doc/ directory
                            relative to current working directory

( Note: The autogen.sh should be run only once, which generates the configure script and runs it too.
Once you have the configure script generated, next time onwards you should run configure instead of autogen.sh.)

It is likely that, while experimenting the tool with XML-Schema, you edit the files like XML-Schema iteratively, and would want to see the build in action for each such edit.
After every edit, you should run following commands in that order: 
---------------------------------------------------------- 
  $  xsd2cpp XML-Schema outdir
  $  cd outdir
  $  run configure ( with your choice of options)
  $  make
  $  make install
---------------------------------------------------------- 

Please note, that the main.cpp if already present in the output path, is not overridden instead a file named "main.cpp.template" is written corresponding to the new invocation. This is so to preserve any user edits inside main.cpp over it's generated copy. The important thing to remember is that if an edit is made to the XML-Schema file, the main.cpp may need to get updated with  changes like renamed classes, new includes, choice of documentElement etc. A "make" in this case may fail on main.cpp. So please make sure to do following in such cases:
 * apply user edits(if any) from current main.cpp to main.cpp.template
 * rename main.cpp.template to main.cpp
 * then run "make"
 


The build is installed in the path depending on --prefix option specified to autogen.sh or configure.
Note that in the absence of an explicit specification of --prefix option, the autogen.sh(generated by xsd2cpp) defaults the install path to a directory build/ relative to the directory of input XML-Schema file.

For the input XML-Schema file <name>.xsd, the build contains:
    * the data-binding+parser+writer library
    * header files to be used in user development sources consuming the abovestated library
    * there is a binary built with name <name>run 

